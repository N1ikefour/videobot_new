import logging
import os
import asyncio
import time
import gc
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from config import BOT_TOKEN
from video_processor import VideoProcessor, process_video_copy_new
from database_postgres import DatabaseManager

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = DatabaseManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MAIN_MENU, WAITING_FOR_VIDEO, PARAMETERS_MENU, CHOOSING_COPIES, CHOOSING_FRAMES, CHOOSING_RESOLUTION, CHOOSING_COMPRESSION = range(7)

class VideoBot:
    def __init__(self):
        self.video_processor = VideoProcessor()
        self.user_data = {}
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.active_processing_tasks = {}
        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ –≤–∏–¥–µ–æ
        # –î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: 16 vCPU, 32 GB RAM
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 8 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        self.processing_semaphore = asyncio.Semaphore(10)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_name = update.effective_user.first_name
        user_id = update.effective_user.id
        username = update.effective_user.username
        last_name = update.effective_user.last_name
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_manager.add_or_update_user(
            user_id=user_id,
            username=username,
            first_name=user_name,
            last_name=last_name
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_manager.log_user_activity(user_id, 'start_command')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db_manager.is_user_banned(user_id):
            await update.message.reply_text(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
            return ConversationHandler.END
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if user_id in self.user_data:
            del self.user_data[user_id]
        
        welcome_text = (
            f"üëã **–ü—Ä–∏–≤–µ—Ç, {user_name}!**\n\n"
            "**–ë–æ—Ç –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ** üöÄ\n\n"
            "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª (–¥–æ 50 –ú–ë)\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏!\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üëá"
        )
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
        keyboard = [[KeyboardButton("üé¨ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")]]
        reply_markup = ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True, 
            one_time_keyboard=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
        if context.user_data.get('conversation_state'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
            context.user_data.clear()
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return MAIN_MENU

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üÜò **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
            
            "üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            
            "üé¨ **–ö–∞–∫ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ:**\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üé¨ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª (–¥–æ 50 –ú–ë)\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π (1-3-6)\n"
            "   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–Ω—ã–µ —Ä–∞–º–∫–∏\n"
            "   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ\n"
            "   ‚Ä¢ –°–∂–∞—Ç—å –≤–∏–¥–µ–æ\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏!\n\n"
            
            "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∏–¥–µ–æ:**\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 50 –ú–ë\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, AVI, MOV, MKV\n"
            "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 10 –º–∏–Ω—É—Ç\n\n"
            
            "‚ö° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±—ã—Å—Ç—Ä–æ!)\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            
            "‚ùì **–ü—Ä–æ–±–ª–µ–º—ã?**\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ `/start` –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"
        )
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )

    async def main_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        
        if text == "üé¨ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ":
            await update.message.reply_text(
                "üìπ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
                "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 50 –ú–ë\n"
                "‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, AVI, MOV, MKV\n"
                "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 10 –º–∏–Ω—É—Ç\n\n"
                "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üëá",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove()
            )
            return WAITING_FOR_VIDEO

    def _all_parameters_selected(self, user_settings: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        return (
            user_settings.get('copies', 0) > 0 and
            'add_frames' in user_settings and
            'change_resolution' in user_settings and
            'compress' in user_settings
        )

    async def show_parameters_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
        user_id = update.effective_user.id
        user_settings = self.user_data.get(user_id, {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        copies = user_settings.get('copies', 1)
        frames_status = "‚úÖ" if user_settings.get('add_frames', False) else "‚ùå"
        resolution_status = "‚úÖ" if user_settings.get('change_resolution', False) else "‚ùå"
        compression_status = "‚úÖ" if user_settings.get('compress', False) else "‚ùå"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        all_selected = self._all_parameters_selected(user_settings)
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π: {copies}", callback_data="choose_copies")],
            [InlineKeyboardButton(f"–†–∞–º–∫–∏ {frames_status}", callback_data="toggle_frames")],
            [InlineKeyboardButton(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {resolution_status}", callback_data="toggle_resolution")],
            [InlineKeyboardButton(f"–°–∂–∞—Ç–∏–µ {compression_status}", callback_data="toggle_compression")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã
        if all_selected:
            keyboard.append([InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é", callback_data="start_processing")])
        
        keyboard.append([InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_process")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã!" if all_selected else "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        
        message_text = (
            "‚öôÔ∏è **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ**\n\n"
            f"{status_text}\n\n"
            "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
            "‚úÖ - –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∫–ª—é—á–µ–Ω, ‚ùå - –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã–∫–ª—é—á–µ–Ω\n\n"
        )
        
        if all_selected:
            message_text += "–ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é'"
        else:
            message_text += "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        return PARAMETERS_MENU

    async def parameters_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π" in text:
            return await self.choose_copies_menu(update, context)
        elif "–†–∞–º–∫–∏" in text:
            return await self.toggle_frames(update, context)
        elif "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ" in text:
            return await self.toggle_resolution(update, context)
        elif "–°–∂–∞—Ç–∏–µ" in text:
            return await self.toggle_compression(update, context)
        elif text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            user_settings = self.user_data.get(user_id, {})
            if self._all_parameters_selected(user_settings):
                return await self.start_final_processing(update, context)
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è **–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã!**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                    parse_mode='Markdown'
                )
                return await self.show_parameters_menu(update, context)
        elif text == "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
            await update.message.reply_text(
                "‚ö†Ô∏è **–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**\n\n"
                "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π\n"
                "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–º–∫–∏\n"
                "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è\n"
                "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∂–∞—Ç–∏–µ\n\n"
                "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π.",
                parse_mode='Markdown'
            )
            return PARAMETERS_MENU
        elif text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
            return await self.restart_process(update, context)
        
        return PARAMETERS_MENU

    async def choose_copies_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
        keyboard = [
            [InlineKeyboardButton("1 –∫–æ–ø–∏—è", callback_data="copies_1")],
            [InlineKeyboardButton("3 –∫–æ–ø–∏–∏", callback_data="copies_3")],
            [InlineKeyboardButton("6 –∫–æ–ø–∏–π", callback_data="copies_6")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data="back_to_parameters")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π:**\n\n"
            "–ß–µ–º –±–æ–ª—å—à–µ –∫–æ–ø–∏–π, —Ç–µ–º –±–æ–ª—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∏–¥–µ–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CHOOSING_COPIES

    async def toggle_frames(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–º–æ–∫"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        
        user_id = update.effective_user.id
        if user_id in self.user_data:
            current_value = self.user_data[user_id].get('add_frames', False)
            self.user_data[user_id]['add_frames'] = not current_value
        
        return await self.show_parameters_menu(update, context)

    async def toggle_resolution(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        
        user_id = update.effective_user.id
        if user_id in self.user_data:
            current_value = self.user_data[user_id].get('change_resolution', False)
            self.user_data[user_id]['change_resolution'] = not current_value
        
        return await self.show_parameters_menu(update, context)

    async def toggle_compression(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–∂–∞—Ç–∏—è"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        
        user_id = update.effective_user.id
        if user_id in self.user_data:
            current_value = self.user_data[user_id].get('compress', False)
            self.user_data[user_id]['compress'] = not current_value
        
        return await self.show_parameters_menu(update, context)

    async def _update_parameters_keyboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë–µ–∑–∑–≤—É—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        user_id = update.effective_user.id
        user_settings = self.user_data.get(user_id, {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        copies_text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π: {user_settings.get('copies', 1)}"
        frames_text = f"–†–∞–º–∫–∏ {'‚úÖ' if user_settings.get('add_frames', False) else ''}"
        resolution_text = f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {'‚úÖ' if user_settings.get('change_resolution', False) else ''}"
        compression_text = f"–°–∂–∞—Ç–∏–µ {'‚úÖ' if user_settings.get('compress', False) else ''}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        all_selected = self._all_parameters_selected(user_settings)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        keyboard = [
            [KeyboardButton(copies_text)],
            [KeyboardButton(frames_text)],
            [KeyboardButton(resolution_text)],
            [KeyboardButton(compression_text)]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã
        if all_selected:
            keyboard.append([KeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é")])
        else:
            keyboard.append([KeyboardButton("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")])
        
        keyboard.append([KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")])
        
        reply_markup = ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True, 
            one_time_keyboard=False
        )
        
        # –ë–µ–∑–∑–≤—É—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ context
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=".",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                reply_markup=reply_markup
            )
            # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=update.message.message_id + 1
            )
        except:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass
        
        return PARAMETERS_MENU

    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db_manager.is_user_banned(user_id):
            await update.message.reply_text(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
            return ConversationHandler.END
        
        if update.message.video:
            video = update.message.video
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ
            db_manager.log_user_activity(
                user_id, 
                'video_upload', 
                {
                    'file_size': video.file_size,
                    'duration': video.duration,
                    'file_id': video.file_id
                }
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            self.user_data[user_id] = {
                'video_file_id': video.file_id,
                'video_file_name': f"video_{user_id}_{video.file_unique_id}.mp4",
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'copies': 1,
                'add_frames': False,
                'change_resolution': False,
                'compress': False
            }
            
            await update.message.reply_text(
                "‚úÖ **–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"
                "üìä –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode='Markdown'
            )
            
            return await self.show_parameters_menu(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV"
            )
            return WAITING_FOR_VIDEO

    async def start_processing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if user_id not in self.user_data:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ!")
            return ConversationHandler.END
        
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π, —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–µ–æ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
        keyboard = [
            [InlineKeyboardButton("1 –∫–æ–ø–∏—è", callback_data="copies_1")],
            [InlineKeyboardButton("3 –∫–æ–ø–∏–∏", callback_data="copies_3")],
            [InlineKeyboardButton("6 –∫–æ–ø–∏–π", callback_data="copies_6")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –≤–∏–¥–µ–æ:",
            reply_markup=reply_markup
        )
        return CHOOSING_COPIES

    async def process_video_for_uniqualization(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ - –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π"""
        user_id = update.effective_user.id
        
        if update.message.video:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            video = update.message.video
            self.user_data[user_id]['processing_video_id'] = video.file_id
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
            keyboard = [
                [InlineKeyboardButton("1 –∫–æ–ø–∏—è", callback_data="copies_1")],
                [InlineKeyboardButton("3 –∫–æ–ø–∏–∏", callback_data="copies_3")],
                [InlineKeyboardButton("6 –∫–æ–ø–∏–π", callback_data="copies_6")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –≤–∏–¥–µ–æ:",
                reply_markup=reply_markup
            )
            return CHOOSING_COPIES
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return WAITING_FOR_VIDEO

    async def choose_copies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        
        user_id = update.effective_user.id
        callback_data = query.data
        
        if callback_data.startswith("copies_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ callback_data
            copies = int(callback_data.split("_")[1])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
            if user_id in self.user_data:
                self.user_data[user_id]['copies'] = copies
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            return await self.show_parameters_menu(update, context)
        
        elif callback_data == "back_to_parameters":
            return await self.show_parameters_menu(update, context)
        
        return CHOOSING_COPIES

    async def choose_frames(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–º–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        add_frames = query.data.split('_')[1] == 'yes'
        self.user_data[user_id]['add_frames'] = add_frames
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = [
            [InlineKeyboardButton("üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", callback_data="resolution_yes")],
            [InlineKeyboardButton("üéØ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ", callback_data="resolution_no")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_copies")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_process")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        frames_text = "—Å —Ü–≤–µ—Ç–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏" if add_frames else "–±–µ–∑ —Ä–∞–º–æ–∫"
        await query.edit_message_text(
            f"üé® **–í—ã–±—Ä–∞–Ω–æ:** {frames_text}\n\n"
            "üìê **–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ?**\n"
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CHOOSING_RESOLUTION

    async def choose_resolution(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        change_resolution = query.data.split('_')[1] == 'yes'
        self.user_data[user_id]['change_resolution'] = change_resolution
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∂–∞—Ç–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = [
            [InlineKeyboardButton("üóúÔ∏è –°–∂–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="compress_yes")],
            [InlineKeyboardButton("üìπ –ù–µ —Å–∂–∏–º–∞—Ç—å", callback_data="compress_no")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_frames")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_process")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        resolution_text = "–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" if change_resolution else "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"
        await query.edit_message_text(
            f"üìê **–í—ã–±—Ä–∞–Ω–æ:** {resolution_text}\n\n"
            "üóúÔ∏è **–°–∂–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞?**\n"
            "–°–∂–∞—Ç–∏–µ —É—Å–∫–æ—Ä–∏—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CHOOSING_COMPRESSION

    async def choose_compression(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —Å–∂–∞—Ç–∏—è –∏ –ø–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        compress = query.data.split('_')[1] == 'yes'
        self.user_data[user_id]['compress'] = compress
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        user_settings = self.user_data[user_id]
        copies = user_settings['copies']
        add_frames = user_settings['add_frames']
        change_resolution = user_settings['change_resolution']
        
        compress_text = "—Å–æ —Å–∂–∞—Ç–∏–µ–º" if compress else "–±–µ–∑ —Å–∂–∞—Ç–∏—è"
        frames_text = "—Å —Ä–∞–º–∫–∞–º–∏" if add_frames else "–±–µ–∑ —Ä–∞–º–æ–∫"
        resolution_text = "–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" if change_resolution else "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data="start_processing")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_resolution")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_process")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await query.edit_message_text(
            f"‚úÖ **–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã!**\n\n"
            f"üìä **–ò—Ç–æ–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"
            f"‚Ä¢ –ö–æ–ø–∏–π: {copies}\n"
            f"‚Ä¢ –†–∞–º–∫–∏: {frames_text}\n"
            f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution_text}\n"
            f"‚Ä¢ –°–∂–∞—Ç–∏–µ: {compress_text}\n\n"
            f"üöÄ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CHOOSING_COMPRESSION

    async def _process_video_async(self, user_id: int, user_settings: dict, 
                                 processing_message, context, chat_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
        input_path = None
        processed_videos = []
        start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        async with self.processing_semaphore:
            try:
                copies = user_settings['copies']
                add_frames = user_settings['add_frames']
                compress = user_settings['compress']
                change_resolution = user_settings['change_resolution']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
                video_file_id = user_settings.get('processing_video_id', user_settings['video_file_id'])
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                await processing_message.edit_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...\n"
                    f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {copies} –∫–æ–ø–∏–π\n\n"
                    f"üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ..."
                )
                
                video_file = await context.bot.get_file(video_file_id)
                input_path = f"temp/input_{user_id}.mp4"
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs("temp", exist_ok=True)
                
                await video_file.download_to_drive(input_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–∫–∞—á–∞–Ω
                if not os.path.exists(input_path):
                    logger.error(f"–§–∞–π–ª {input_path} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                    await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                
                file_size = os.path.getsize(input_path)
                logger.info(f"–§–∞–π–ª {input_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await processing_message.edit_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...\n"
                    f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {copies} –∫–æ–ø–∏–π\n\n"
                    f"üé¨ –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏..."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                processed_videos = await self._process_with_progress_updates(
                    input_path, user_id, copies, add_frames, compress, change_resolution,
                    processing_message
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await processing_message.edit_text(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ...\n"
                    f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_videos)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
                for i, video_path in enumerate(processed_videos, 1):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await processing_message.edit_text(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ {i}/{len(processed_videos)}...\n"
                        f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_videos)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                    )
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    video_data = await asyncio.to_thread(self._read_video_file, video_path)
                    await context.bot.send_video(
                        chat_id=chat_id,
                        video=video_data,
                        caption=f"üé¨ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è #{i}/{copies}"
                    )
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(video_path)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                if input_path and os.path.exists(input_path):
                    os.remove(input_path)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ
                db_manager.log_user_activity(
                    user_id, 
                    'video_processed', 
                    {
                        'copies_created': len(processed_videos),
                        'processing_time': time.time() - start_time,
                        'settings': user_settings
                    }
                )
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await processing_message.edit_text(
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"üìπ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(processed_videos)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π",
                    parse_mode='Markdown'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="üìπ **–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ**\n\n"
                         "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                         "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 50 –ú–ë\n"
                         "‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, AVI, MOV, MKV\n"
                         "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 10 –º–∏–Ω—É—Ç\n\n"
                         "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üëá",
                    parse_mode='Markdown'
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ context
                context.user_data['conversation_state'] = WAITING_FOR_VIDEO
                
            except asyncio.CancelledError:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    await processing_message.edit_text(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}\n\n"
                        "üìπ **–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ**\n\n"
                        "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                        "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 50 –ú–ë\n"
                        "‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, AVI, MOV, MKV\n"
                        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 10 –º–∏–Ω—É—Ç\n\n"
                        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üëá",
                        parse_mode='Markdown'
                    )
                except:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}\n\n"
                             "üìπ **–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ**\n\n"
                             "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                             "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 50 –ú–ë\n"
                             "‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, AVI, MOV, MKV\n"
                             "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 10 –º–∏–Ω—É—Ç\n\n"
                             "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üëá",
                        parse_mode='Markdown'
                    )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ context
                context.user_data['conversation_state'] = WAITING_FOR_VIDEO
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                if input_path and os.path.exists(input_path):
                    try:
                        os.remove(input_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {input_path}: {e}")
                
                # –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                for video_path in processed_videos:
                    if os.path.exists(video_path):
                        try:
                            os.remove(video_path)
                            logger.info(f"–£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {video_path}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {video_path}: {e}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
                if user_id in self.user_data:
                    del self.user_data[user_id]
                if user_id in self.active_processing_tasks:
                    del self.active_processing_tasks[user_id]

    async def _process_with_progress_updates(self, input_path: str, user_id: int, 
                                           copies: int, add_frames: bool, compress: bool, change_resolution: bool,
                                           processing_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –∫–æ–ø–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        await processing_message.edit_text(
            f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...\n"
            f"üìä –°–æ–∑–¥–∞—é {copies} –∫–æ–ø–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n\n"
            f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∫–æ–ø–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ..."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ–ø–∏–π
        tasks = []
        output_paths = []
        
        for i in range(copies):
            output_path = f"output/processed_{user_id}_{i+1}.mp4"
            output_paths.append(output_path)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ø–∏–∏
            task = self._process_single_copy(
                input_path, output_path, i, add_frames, compress, change_resolution, user_id
            )
            tasks.append(task)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        completed_count = {'value': 0}
        status_update_task = asyncio.create_task(
            self._update_processing_status(processing_message, copies, completed_count)
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–ø–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {copies} –∫–æ–ø–∏–π")
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status_update_task.cancel()
        try:
            await status_update_task
        except asyncio.CancelledError:
            pass
        
        # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        processed_videos = []
        for i, (result, output_path) in enumerate(zip(results, output_paths)):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {i+1}: {str(result)}")
            elif result and os.path.exists(output_path):
                processed_videos.append(output_path)
                logger.info(f"‚úÖ –ö–æ–ø–∏—è {i+1} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –ö–æ–ø–∏—è {i+1} –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        logger.info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {len(processed_videos)}/{copies}")
        return processed_videos
    
    async def _update_processing_status(self, processing_message, total_copies: int, completed_count: dict):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        dots = 0
        last_text = ""
        while True:
            try:
                await asyncio.sleep(3)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                dots = (dots + 1) % 4
                animation = "." * dots
                
                new_text = (
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ{animation}\n"
                    f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {total_copies} –∫–æ–ø–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n\n"
                    f"‚ö° –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –≤ {total_copies}x —Ä–∞–∑!\n"
                    f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                )
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                if new_text != last_text:
                    try:
                        await processing_message.edit_text(new_text)
                        last_text = new_text
                    except Exception as edit_error:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                        
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                break

    async def _process_single_copy(self, input_path: str, output_path: str, 
                                 copy_index: int, add_frames: bool, compress: bool, change_resolution: bool, user_id: int = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–æ–ø–∏–∏ –≤–∏–¥–µ–æ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –≤–º–µ—Å—Ç–æ ProcessPoolExecutor –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å pickle
            loop = asyncio.get_event_loop()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            file_size = os.path.getsize(input_path) / (1024 * 1024)  # MB
            timeout_seconds = max(300, int(file_size * 30))  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
            
            result = await asyncio.wait_for(
                loop.run_in_executor(
                    None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ThreadPoolExecutor
                    self._process_video_copy_wrapper,
                    input_path, output_path, copy_index, add_frames, compress, change_resolution, user_id
                ),
                timeout=timeout_seconds
            )
            
            return True
            
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {copy_index+1}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {copy_index+1}: {str(e)}")
            return False

    def _process_video_copy_wrapper(self, input_path: str, output_path: str, 
                                  copy_index: int, add_frames: bool, compress: bool, change_resolution: bool, user_id: int = None):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        from video_processor import process_video_copy_new
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
        abs_input_path = os.path.abspath(input_path)
        abs_output_path = os.path.abspath(output_path)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(abs_output_path), exist_ok=True)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å user_id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–º–µ–Ω—ã
        return process_video_copy_new(abs_input_path, abs_output_path, copy_index, add_frames, compress, change_resolution, user_id)

    def _read_video_file(self, video_path: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""
        with open(video_path, 'rb') as video_file:
            return video_file.read()

    async def back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if user_id in self.user_data:
            del self.user_data[user_id]
        
        welcome_text = (
            "üé¨ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "**–ë–æ—Ç –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ** üöÄ\n\n"
            "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª (–¥–æ 50 –ú–ë)\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π (1-3-6)\n"
            "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏!\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üëá"
        )
        
        keyboard = [[InlineKeyboardButton("üé¨ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="main_menu_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    async def back_to_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üì§ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 50 –ú–ë\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, AVI, MOV, MKV\n"
            "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 10 –º–∏–Ω—É—Ç\n\n"
            "‚¨áÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é",
            parse_mode='Markdown'
        )
        return WAITING_FOR_VIDEO

    async def back_to_copies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("1 –∫–æ–ø–∏—è", callback_data="copies_1")],
            [InlineKeyboardButton("3 –∫–æ–ø–∏–∏", callback_data="copies_3")], 
            [InlineKeyboardButton("6 –∫–æ–ø–∏–π", callback_data="copies_6")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_process")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚úÖ **–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!**\n\n"
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CHOOSING_COPIES

    async def back_to_frames(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–º–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if user_id not in self.user_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–º–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = [
            [InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫–∏", callback_data="frames_yes")],
            [InlineKeyboardButton("üìπ –ë–µ–∑ —Ä–∞–º–æ–∫", callback_data="frames_no")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_copies")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_process")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        copies = self.user_data[user_id]['copies']
        await query.edit_message_text(
            f"üìä **–í—ã–±—Ä–∞–Ω–æ:** {copies} –∫–æ–ø–∏–π\n\n"
            "üñºÔ∏è **–î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–Ω—ã–µ —Ä–∞–º–∫–∏ –∫ –≤–∏–¥–µ–æ?**\n"
            "–†–∞–º–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —Å–¥–µ–ª–∞—Ç—å –∫–∞–∂–¥—É—é –∫–æ–ø–∏—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–π",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CHOOSING_FRAMES

    async def back_to_resolution(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if user_id not in self.user_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = [
            [InlineKeyboardButton("üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", callback_data="resolution_yes")],
            [InlineKeyboardButton("üìπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", callback_data="resolution_no")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_frames")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_process")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        user_settings = self.user_data[user_id]
        copies = user_settings['copies']
        frames_text = "—Å —Ä–∞–º–∫–∞–º–∏" if user_settings['add_frames'] else "–±–µ–∑ —Ä–∞–º–æ–∫"
        
        await query.edit_message_text(
            f"üìä **–í—ã–±—Ä–∞–Ω–æ:** {copies} –∫–æ–ø–∏–π {frames_text}\n\n"
            "üìê **–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ?**\n"
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏–∏ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return CHOOSING_RESOLUTION

    async def restart_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in self.active_processing_tasks:
            self.active_processing_tasks[user_id].cancel()
            del self.active_processing_tasks[user_id]
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_data:
            # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'video_path' in self.user_data[user_id]:
                video_path = self.user_data[user_id]['video_path']
                if os.path.exists(video_path):
                    try:
                        os.remove(video_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {video_path}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {video_path}: {e}")
            
            del self.user_data[user_id]
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ
        reply_markup = ReplyKeyboardRemove()
        
        message_text = (
            "üìπ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 50 –ú–ë\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, AVI, MOV, MKV\n"
            "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 10 –º–∏–Ω—É—Ç\n\n"
            "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üëá"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                message_text,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        return WAITING_FOR_VIDEO

    async def start_final_processing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        
        user_id = update.effective_user.id
        
        if user_id not in self.user_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        user_settings = self.user_data[user_id]
        copies = user_settings['copies']
        add_frames = user_settings['add_frames']
        change_resolution = user_settings['change_resolution']
        compress = user_settings['compress']
        
        compress_text = "—Å–æ —Å–∂–∞—Ç–∏–µ–º" if compress else "–±–µ–∑ —Å–∂–∞—Ç–∏—è"
        frames_text = "—Å —Ä–∞–º–∫–∞–º–∏" if add_frames else "–±–µ–∑ —Ä–∞–º–æ–∫"
        resolution_text = "–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" if change_resolution else "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await query.edit_message_text(
            f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...\n"
            f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"‚Ä¢ –ö–æ–ø–∏–π: {copies}\n"
            f"‚Ä¢ –†–∞–º–∫–∏: {frames_text}\n"
            f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution_text}\n"
            f"‚Ä¢ –°–∂–∞—Ç–∏–µ: {compress_text}\n\n"
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        task = asyncio.create_task(
            self._process_video_async(
                user_id, 
                user_settings, 
                processing_message, 
                context,
                update.effective_chat.id
            )
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        self.active_processing_tasks[user_id] = task
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ
        return WAITING_FOR_VIDEO

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if not db_manager.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            stats = db_manager.get_general_stats()
            
            stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {stats['active_24h']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_7d']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {stats['active_30d']}

üé¨ **–í–∏–¥–µ–æ:**
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_videos']}
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['videos_today']}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['videos_week']}

üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:** {stats['banned_users']}
"""
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def admin_ban(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if not db_manager.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
                "–ü—Ä–∏–º–µ—Ä: `/admin_ban 123456789`",
                parse_mode='Markdown'
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            reason = " ".join(context.args[1:]) if len(context.args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è
            if target_user_id == user_id:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å —Ç–æ–∂–µ –∞–¥–º–∏–Ω–æ–º
            if db_manager.is_admin(target_user_id):
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = db_manager.ban_user(target_user_id, user_id, reason)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
                db_manager.log_admin_action(user_id, 'ban_user', {
                    'target_user_id': target_user_id,
                    'reason': reason
                })
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def admin_unban(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if not db_manager.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
                "–ü—Ä–∏–º–µ—Ä: `/admin_unban 123456789`",
                parse_mode='Markdown'
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = db_manager.unban_user(target_user_id, user_id)
            
            if success:
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
                db_manager.log_admin_action(user_id, 'unban_user', {
                    'target_user_id': target_user_id
                })
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def admin_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if not db_manager.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page = 1
            if context.args and context.args[0].isdigit():
                page = int(context.args[0])
            
            limit = 10
            offset = (page - 1) * limit
            
            users = db_manager.get_all_users(limit, offset)
            
            if not users:
                await update.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            users_text = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):**\n\n"
            
            for user in users:
                status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user['is_banned'] else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                users_text += f"**ID:** `{user['user_id']}`\n"
                users_text += f"**–ò–º—è:** {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                users_text += f"**Username:** @{user['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                users_text += f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
                users_text += f"**–í–∏–¥–µ–æ:** {user['videos_processed']}\n"
                users_text += f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user['created_at'][:10]}\n"
                users_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            
            users_text += f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} | –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/admin_users {page + 1}` –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
            
            await update.message.reply_text(users_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    async def admin_active_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if not db_manager.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
            hours = 24
            if context.args and context.args[0].isdigit():
                hours = int(context.args[0])
                if hours > 720:  # –ú–∞–∫—Å–∏–º—É–º 30 –¥–Ω–µ–π
                    hours = 720
            
            active_users = db_manager.get_active_users(hours)
            
            if not active_users:
                await update.message.reply_text(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            users_text = f"üë• **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ {hours}—á:**\n\n"
            
            for user in active_users[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
                users_text += f"**ID:** `{user['user_id']}`\n"
                users_text += f"**–ò–º—è:** {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                users_text += f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user['last_activity'][:16]}\n"
                users_text += f"**–î–µ–π—Å—Ç–≤–∏–π:** {user['activity_count']}\n"
                users_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            
            if len(active_users) > 20:
                users_text += f"\n... –∏ –µ—â–µ {len(active_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            users_text += f"\nüìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}"
            
            await update.message.reply_text(users_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    async def admin_add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º (–ø–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω –≤ —Å–∏—Å—Ç–µ–º–µ)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞
        SUPER_ADMIN_ID = 454002721  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
        
        if user_id != SUPER_ADMIN_ID:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º\n"
                "–ü—Ä–∏–º–µ—Ä: `/admin_add_admin 123456789`",
                parse_mode='Markdown'
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∞
            success = db_manager.add_admin(target_user_id, user_id)
            
            if success:
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                db_manager.log_admin_action(user_id, 'make_admin', {
                    'target_user_id': target_user_id
                })
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    async def admin_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if not db_manager.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        help_text = """üîß **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**

üìä `/admin_stats` - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
üë• `/admin_users [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]` - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üü¢ `/admin_active_users [—á–∞—Å—ã]` - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
üö´ `/admin_ban <ID> [–ø—Ä–∏—á–∏–Ω–∞]` - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚úÖ `/admin_unban <ID>` - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚ùì `/admin_help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/admin_users 2` - 2-—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/admin_active_users 48` - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 48 —á–∞—Å–æ–≤
‚Ä¢ `/admin_ban 123456789 —Å–ø–∞–º` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞ —Å–ø–∞–º
"""
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    from video_processor import cleanup_old_temp_files
    from config import TEMP_DIR
    cleanup_old_temp_files(TEMP_DIR)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    video_bot = VideoBot()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', video_bot.start)
        ],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & filters.Regex("^üé¨ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ$"), video_bot.main_menu_handler),
                CallbackQueryHandler(video_bot.show_parameters_menu, pattern="^start_processing$"),
                CommandHandler('start', video_bot.start),  # –î–æ–±–∞–≤–ª—è–µ–º /start –≤ MAIN_MENU
                CommandHandler('help', video_bot.help_command)  # –î–æ–±–∞–≤–ª—è–µ–º /help –≤ MAIN_MENU
            ],
            WAITING_FOR_VIDEO: [
                MessageHandler(filters.VIDEO, video_bot.handle_video),
                CallbackQueryHandler(video_bot.show_parameters_menu, pattern="^start_processing$"),
                CommandHandler('start', video_bot.start),  # –î–æ–±–∞–≤–ª—è–µ–º /start –≤ WAITING_FOR_VIDEO
                CommandHandler('help', video_bot.help_command)  # –î–æ–±–∞–≤–ª—è–µ–º /help –≤ WAITING_FOR_VIDEO
            ],
            PARAMETERS_MENU: [
                CallbackQueryHandler(video_bot.choose_copies_menu, pattern="^choose_copies$"),
                CallbackQueryHandler(video_bot.toggle_frames, pattern="^toggle_frames$"),
                CallbackQueryHandler(video_bot.toggle_resolution, pattern="^toggle_resolution$"),
                CallbackQueryHandler(video_bot.toggle_compression, pattern="^toggle_compression$"),
                CallbackQueryHandler(video_bot.start_final_processing, pattern="^start_processing$"),
                CallbackQueryHandler(video_bot.restart_process, pattern="^restart_process$"),
                CommandHandler('start', video_bot.start),  # –î–æ–±–∞–≤–ª—è–µ–º /start –≤ PARAMETERS_MENU
                CommandHandler('help', video_bot.help_command)  # –î–æ–±–∞–≤–ª—è–µ–º /help –≤ PARAMETERS_MENU
            ],
            CHOOSING_COPIES: [
                CallbackQueryHandler(video_bot.choose_copies, pattern="^copies_[136]$"),
                CallbackQueryHandler(video_bot.show_parameters_menu, pattern="^back_to_parameters$"),
                CommandHandler('start', video_bot.start),  # –î–æ–±–∞–≤–ª—è–µ–º /start –≤ CHOOSING_COPIES
                CommandHandler('help', video_bot.help_command)  # –î–æ–±–∞–≤–ª—è–µ–º /help –≤ CHOOSING_COPIES
            ],
            CHOOSING_FRAMES: [
                CallbackQueryHandler(video_bot.choose_frames, pattern="^frames_(yes|no)$"),
                CallbackQueryHandler(video_bot.back_to_copies, pattern="^back_to_copies$"),
                CallbackQueryHandler(video_bot.restart_process, pattern="^restart_process$"),
                CommandHandler('start', video_bot.start),  # –î–æ–±–∞–≤–ª—è–µ–º /start –≤ CHOOSING_FRAMES
                CommandHandler('help', video_bot.help_command)  # –î–æ–±–∞–≤–ª—è–µ–º /help –≤ CHOOSING_FRAMES
            ],
            CHOOSING_RESOLUTION: [
                CallbackQueryHandler(video_bot.choose_resolution, pattern="^resolution_(yes|no)$"),
                CallbackQueryHandler(video_bot.back_to_frames, pattern="^back_to_frames$"),
                CallbackQueryHandler(video_bot.restart_process, pattern="^restart_process$"),
                CommandHandler('start', video_bot.start),  # –î–æ–±–∞–≤–ª—è–µ–º /start –≤ CHOOSING_RESOLUTION
                CommandHandler('help', video_bot.help_command)  # –î–æ–±–∞–≤–ª—è–µ–º /help –≤ CHOOSING_RESOLUTION
            ],
            CHOOSING_COMPRESSION: [
                CallbackQueryHandler(video_bot.choose_compression, pattern="^compress_(yes|no)$"),
                CallbackQueryHandler(video_bot.back_to_resolution, pattern="^back_to_resolution$"),
                CallbackQueryHandler(video_bot.restart_process, pattern="^restart_process$"),
                CommandHandler('start', video_bot.start),  # –î–æ–±–∞–≤–ª—è–µ–º /start –≤ CHOOSING_COMPRESSION
                CommandHandler('help', video_bot.help_command)  # –î–æ–±–∞–≤–ª—è–µ–º /help –≤ CHOOSING_COMPRESSION
            ]
        },
        fallbacks=[
            CommandHandler('start', video_bot.start),  # –î–æ–±–∞–≤–ª—è–µ–º /start –≤ fallbacks –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            CommandHandler('help', video_bot.help_command)  # –î–æ–±–∞–≤–ª—è–µ–º /help –≤ fallbacks –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        ]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è —Å–ª—É—á–∞–µ–≤ –≤–Ω–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    application.add_handler(CommandHandler('start', video_bot.start))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    application.add_handler(CommandHandler('help', video_bot.help_command))
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_stats", video_bot.admin_stats))
    application.add_handler(CommandHandler("admin_ban", video_bot.admin_ban))
    application.add_handler(CommandHandler("admin_unban", video_bot.admin_unban))
    application.add_handler(CommandHandler("admin_users", video_bot.admin_users))
    application.add_handler(CommandHandler("admin_active_users", video_bot.admin_active_users))
    application.add_handler(CommandHandler("admin_add_admin", video_bot.admin_add_admin))
    application.add_handler(CommandHandler("admin_help", video_bot.admin_help))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()