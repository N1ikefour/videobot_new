import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from config import BOT_TOKEN
from video_processor import VideoProcessor, process_video_copy_new

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_VIDEO, CHOOSING_COPIES, CHOOSING_FRAMES, CHOOSING_RESOLUTION, CHOOSING_COMPRESSION = range(5)

class VideoBot:
    def __init__(self):
        self.video_processor = VideoProcessor()
        self.user_data = {}
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.active_processing_tasks = {}
        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ –≤–∏–¥–µ–æ
        # –î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: 16 vCPU, 32 GB RAM
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 8 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        self.processing_semaphore = asyncio.Semaphore(10)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "üé¨ **–ë–æ—Ç –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ**\n\n"
            "üìã **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª (–¥–æ 50 –ú–ë)\n"
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'\n"
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π (1-5)\n"
            "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ, –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ —Ä–∞–º–∫–∏\n"
            "5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è\n"
            "6Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏!\n\n"
            "‚ö° **–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:**\n"
            "‚Ä¢ –ò–∑–º–µ–Ω—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–Ω—ã–µ —Ä–∞–º–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n"
            "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —è—Ä–∫–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç\n"
            "‚Ä¢ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–π —É–≥–æ–ª\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç –µ–¥–≤–∞ –∑–∞–º–µ—Ç–Ω—ã–π —à—É–º\n\n"
            "‚è±Ô∏è **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ~2-3 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–æ–ø–∏—é\n"
        )
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
        return ConversationHandler.END

    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if update.message.video:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video = update.message.video
            self.user_data[user_id] = {
                'video_file_id': video.file_id,
                'video_file_name': f"video_{user_id}_{video.file_unique_id}.mp4"
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            keyboard = [[InlineKeyboardButton("üé¨ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="start_processing")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")

    async def start_processing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if user_id not in self.user_data:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ!")
            return ConversationHandler.END
        
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π, —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–µ–æ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
        keyboard = [
            [InlineKeyboardButton("1 –∫–æ–ø–∏—è", callback_data="copies_1")],
            [InlineKeyboardButton("2 –∫–æ–ø–∏–∏", callback_data="copies_2")],
            [InlineKeyboardButton("3 –∫–æ–ø–∏–∏", callback_data="copies_3")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –≤–∏–¥–µ–æ:",
            reply_markup=reply_markup
        )
        return CHOOSING_COPIES

    async def process_video_for_uniqualization(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ - –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π"""
        user_id = update.effective_user.id
        
        if update.message.video:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            video = update.message.video
            self.user_data[user_id]['processing_video_id'] = video.file_id
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
            keyboard = [
                [InlineKeyboardButton("1 –∫–æ–ø–∏—è", callback_data="copies_1")],
                [InlineKeyboardButton("2 –∫–æ–ø–∏–∏", callback_data="copies_2")],
                [InlineKeyboardButton("3 –∫–æ–ø–∏–∏", callback_data="copies_3")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –≤–∏–¥–µ–æ:",
                reply_markup=reply_markup
            )
            return CHOOSING_COPIES
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return WAITING_FOR_VIDEO

    async def choose_copies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        copies = int(query.data.split('_')[1])
        self.user_data[user_id]['copies'] = copies
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–º–æ–∫
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫–∏", callback_data="frames_yes")],
            [InlineKeyboardButton("‚ùå –ë–µ–∑ —Ä–∞–º–æ–∫", callback_data="frames_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–æ –∫–æ–ø–∏–π: {copies}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞–º–æ–∫:",
            reply_markup=reply_markup
        )
        return CHOOSING_FRAMES

    async def choose_frames(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–º–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        add_frames = query.data.split('_')[1] == 'yes'
        self.user_data[user_id]['add_frames'] = add_frames
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", callback_data="resolution_yes")],
            [InlineKeyboardButton("üéØ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ", callback_data="resolution_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        frames_text = "—Å —Ä–∞–º–∫–∞–º–∏" if add_frames else "–±–µ–∑ —Ä–∞–º–æ–∫"
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–æ: {frames_text}\n\n–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ?",
            reply_markup=reply_markup
        )
        return CHOOSING_RESOLUTION

    async def choose_resolution(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        change_resolution = query.data.split('_')[1] == 'yes'
        self.user_data[user_id]['change_resolution'] = change_resolution
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∂–∞—Ç–∏—è
        keyboard = [
            [InlineKeyboardButton("üóúÔ∏è –°–∂–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="compress_yes")],
            [InlineKeyboardButton("üìπ –ù–µ —Å–∂–∏–º–∞—Ç—å", callback_data="compress_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        resolution_text = "–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" if change_resolution else "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–æ: {resolution_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Å–∂–∞—Ç–∏—è:",
            reply_markup=reply_markup
        )
        return CHOOSING_COMPRESSION

    async def choose_compression(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä —Å–∂–∞—Ç–∏—è –∏ –∑–∞–ø—É—Å–∫ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        compress = query.data.split('_')[1] == 'yes'
        self.user_data[user_id]['compress'] = compress
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        user_settings = self.user_data[user_id]
        copies = user_settings['copies']
        add_frames = user_settings['add_frames']
        change_resolution = user_settings['change_resolution']
        
        compress_text = "—Å–æ —Å–∂–∞—Ç–∏–µ–º" if compress else "–±–µ–∑ —Å–∂–∞—Ç–∏—è"
        frames_text = "—Å —Ä–∞–º–∫–∞–º–∏" if add_frames else "–±–µ–∑ —Ä–∞–º–æ–∫"
        resolution_text = "–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" if change_resolution else "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await query.edit_message_text(
            f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...\n"
            f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"‚Ä¢ –ö–æ–ø–∏–π: {copies}\n"
            f"‚Ä¢ –†–∞–º–∫–∏: {frames_text}\n"
            f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution_text}\n"
            f"‚Ä¢ –°–∂–∞—Ç–∏–µ: {compress_text}\n\n"
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        task = asyncio.create_task(
            self._process_video_async(
                user_id, 
                user_settings, 
                processing_message, 
                context,
                query.message.chat_id
            )
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        self.active_processing_tasks[user_id] = task
        
        # –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç—É
        return ConversationHandler.END

    async def _process_video_async(self, user_id: int, user_settings: dict, 
                                 processing_message, context, chat_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        async with self.processing_semaphore:
            try:
                copies = user_settings['copies']
                add_frames = user_settings['add_frames']
                compress = user_settings['compress']
                change_resolution = user_settings['change_resolution']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
                video_file_id = user_settings.get('processing_video_id', user_settings['video_file_id'])
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                await processing_message.edit_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...\n"
                    f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {copies} –∫–æ–ø–∏–π\n\n"
                    f"üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ..."
                )
                
                video_file = await context.bot.get_file(video_file_id)
                input_path = f"temp/input_{user_id}.mp4"
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs("temp", exist_ok=True)
                
                await video_file.download_to_drive(input_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–∫–∞—á–∞–Ω
                if not os.path.exists(input_path):
                    logger.error(f"–§–∞–π–ª {input_path} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                    await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                
                file_size = os.path.getsize(input_path)
                logger.info(f"–§–∞–π–ª {input_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await processing_message.edit_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...\n"
                    f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {copies} –∫–æ–ø–∏–π\n\n"
                    f"üé¨ –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏..."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                processed_videos = await self._process_with_progress_updates(
                    input_path, user_id, copies, add_frames, compress, change_resolution,
                    processing_message
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await processing_message.edit_text(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ...\n"
                    f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_videos)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
                for i, video_path in enumerate(processed_videos, 1):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await processing_message.edit_text(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ {i}/{len(processed_videos)}...\n"
                        f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_videos)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                    )
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    video_data = await asyncio.to_thread(self._read_video_file, video_path)
                    await context.bot.send_video(
                        chat_id=chat_id,
                        video=video_data,
                        caption=f"üé¨ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è #{i}/{copies}"
                    )
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(video_path)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                os.remove(input_path)
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await processing_message.edit_text(
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"üìπ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(processed_videos)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
                try:
                    await processing_message.edit_text(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
                    )
                except:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}\n\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
                    )
            finally:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
                if user_id in self.user_data:
                    del self.user_data[user_id]
                if user_id in self.active_processing_tasks:
                    del self.active_processing_tasks[user_id]

    async def _process_with_progress_updates(self, input_path: str, user_id: int, 
                                           copies: int, add_frames: bool, compress: bool, change_resolution: bool,
                                           processing_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –∫–æ–ø–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        await processing_message.edit_text(
            f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...\n"
            f"üìä –°–æ–∑–¥–∞—é {copies} –∫–æ–ø–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n\n"
            f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∫–æ–ø–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ..."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ–ø–∏–π
        tasks = []
        output_paths = []
        
        for i in range(copies):
            output_path = f"output/processed_{user_id}_{i+1}.mp4"
            output_paths.append(output_path)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ø–∏–∏
            task = self._process_single_copy(
                input_path, output_path, i, add_frames, compress, change_resolution
            )
            tasks.append(task)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        completed_count = {'value': 0}
        status_update_task = asyncio.create_task(
            self._update_processing_status(processing_message, copies, completed_count)
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–ø–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {copies} –∫–æ–ø–∏–π")
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status_update_task.cancel()
        try:
            await status_update_task
        except asyncio.CancelledError:
            pass
        
        # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        processed_videos = []
        for i, (result, output_path) in enumerate(zip(results, output_paths)):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {i+1}: {str(result)}")
            elif result and os.path.exists(output_path):
                processed_videos.append(output_path)
                logger.info(f"‚úÖ –ö–æ–ø–∏—è {i+1} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –ö–æ–ø–∏—è {i+1} –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        logger.info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {len(processed_videos)}/{copies}")
        return processed_videos
    
    async def _update_processing_status(self, processing_message, total_copies: int, completed_count: dict):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        dots = 0
        while True:
            try:
                await asyncio.sleep(3)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                dots = (dots + 1) % 4
                animation = "." * dots
                
                await processing_message.edit_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ{animation}\n"
                    f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {total_copies} –∫–æ–ø–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n\n"
                    f"‚ö° –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –≤ {total_copies}x —Ä–∞–∑!\n"
                    f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                )
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                break

    async def _process_single_copy(self, input_path: str, output_path: str, 
                                 copy_index: int, add_frames: bool, compress: bool, change_resolution: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–æ–ø–∏–∏ –≤–∏–¥–µ–æ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –≤–º–µ—Å—Ç–æ ProcessPoolExecutor –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å pickle
            loop = asyncio.get_event_loop()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            file_size = os.path.getsize(input_path) / (1024 * 1024)  # MB
            timeout_seconds = max(300, int(file_size * 30))  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
            
            result = await asyncio.wait_for(
                loop.run_in_executor(
                    None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ThreadPoolExecutor
                    self._process_video_copy_wrapper,
                    input_path, output_path, copy_index, add_frames, compress, change_resolution
                ),
                timeout=timeout_seconds
            )
            
            return True
            
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {copy_index+1}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {copy_index+1}: {str(e)}")
            return False

    def _process_video_copy_wrapper(self, input_path: str, output_path: str, 
                                  copy_index: int, add_frames: bool, compress: bool, change_resolution: bool):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        from video_processor import process_video_copy_new
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
        abs_input_path = os.path.abspath(input_path)
        abs_output_path = os.path.abspath(output_path)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(abs_output_path), exist_ok=True)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return process_video_copy_new(abs_input_path, abs_output_path, copy_index, add_frames, compress, change_resolution)

    def _read_video_file(self, video_path: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""
        with open(video_path, 'rb') as video_file:
            return video_file.read()

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        if user_id in self.user_data:
            del self.user_data[user_id]
        
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = VideoBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(bot.start_processing, pattern="^start_processing$")],
        states={
            CHOOSING_COPIES: [CallbackQueryHandler(bot.choose_copies, pattern="^copies_")],
            CHOOSING_FRAMES: [CallbackQueryHandler(bot.choose_frames, pattern="^frames_")],
            CHOOSING_RESOLUTION: [CallbackQueryHandler(bot.choose_resolution, pattern="^resolution_")],
            CHOOSING_COMPRESSION: [CallbackQueryHandler(bot.choose_compression, pattern="^compress_")],
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)],
        per_user=True,  # –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        per_message=False  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ per_message –¥–ª—è CallbackQueryHandler
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(filters.VIDEO, bot.handle_video))
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()