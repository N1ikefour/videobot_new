import os
import random
import asyncio
import logging
import time
import hashlib
from PIL import Image, ImageDraw, ImageFilter, ImageEnhance
import numpy as np
from config import OUTPUT_IMAGES_DIR, TEMP_DIR

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def cleanup_old_temp_images(temp_dir: str):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞"""
    try:
        current_time = time.time()
        for filename in os.listdir(temp_dir):
            if filename.startswith('temp-image-') and (filename.endswith('.jpg') or filename.endswith('.png')):
                file_path = os.path.join(temp_dir, filename)
                if os.path.isfile(file_path):
                    file_age = current_time - os.path.getmtime(file_path)
                    if file_age > 3600:  # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
                        os.remove(file_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {filename}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

class ImageProcessor:
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–º–æ–∫
        self.frame_colors = [
            (255, 0, 0),      # –ö—Ä–∞—Å–Ω—ã–π
            (0, 255, 0),      # –ó–µ–ª–µ–Ω—ã–π  
            (0, 0, 255),      # –°–∏–Ω–∏–π
            (255, 255, 0),    # –ñ–µ–ª—Ç—ã–π
            (255, 0, 255),    # –ü—É—Ä–ø—É—Ä–Ω—ã–π
            (0, 255, 255),    # –ì–æ–ª—É–±–æ–π
            (255, 128, 0),    # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            (128, 0, 255),    # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            (255, 192, 203),  # –†–æ–∑–æ–≤—ã–π
            (0, 128, 0),      # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
            (128, 128, 0),    # –û–ª–∏–≤–∫–æ–≤—ã–π
            (0, 128, 128),    # –¢–µ–º–Ω–æ-–≥–æ–ª—É–±–æ–π
            (128, 0, 0),      # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
            (0, 0, 128),      # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
            (255, 165, 0),    # –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            (75, 0, 130),     # –ò–Ω–¥–∏–≥–æ
            (238, 130, 238),  # –§–∏–æ–ª–µ—Ç–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π
            (255, 20, 147),   # –¢–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
            (0, 191, 255),    # –Ø—Ä–∫–æ-–≥–æ–ª—É–±–æ–π
            (50, 205, 50),    # –õ–∞–π–º-–∑–µ–ª–µ–Ω—ã–π
            (255, 69, 0),     # –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
            (138, 43, 226),   # –°–∏–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            (255, 215, 0),    # –ó–æ–ª–æ—Ç–æ–π
            (220, 20, 60),    # –ú–∞–ª–∏–Ω–æ–≤—ã–π
            (32, 178, 170),   # –°–≤–µ—Ç–ª–æ-–º–æ—Ä—Å–∫–æ–π
            (255, 105, 180),  # –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
            (124, 252, 0),    # –õ–∞–π–º
            (255, 99, 71),    # –¢–æ–º–∞—Ç–Ω—ã–π
            (72, 61, 139),    # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Å–ª–∞–Ω–µ—Ü
            (255, 140, 0)     # –¢–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        ]

    async def process_image(self, input_path: str, user_id: int, copies: int, add_frames: bool, 
                          add_filters: bool, add_rotation: bool, change_size: bool, target_size: tuple = None):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        logger.info(f"=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        logger.info(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path}")
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π: {copies}")
        logger.info(f"–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫–∏: {add_frames}")
        logger.info(f"–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã: {add_filters}")
        logger.info(f"–î–æ–±–∞–≤–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç—ã: {add_rotation}")
        logger.info(f"–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä: {change_size}")
        
        processed_images = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if not os.path.exists(input_path):
                logger.error(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
                raise FileNotFoundError(f"–§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            logger.info(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {input_path}")
            file_size = os.path.getsize(input_path) / (1024 * 1024)  # MB
            logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} MB")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ–ø–∏–π
            tasks = []
            output_paths = []
            
            for i in range(copies):
                output_path = f"{OUTPUT_IMAGES_DIR}/processed_{user_id}_{i+1}.jpg"
                output_paths.append(output_path)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ø–∏–∏
                task = self._process_single_image_copy(
                    input_path, output_path, i, add_frames, add_filters, add_rotation, change_size, user_id, target_size
                )
                tasks.append(task)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–ø–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {copies} –∫–æ–ø–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, (result, output_path) in enumerate(zip(results, output_paths)):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {i+1}: {str(result)}")
                elif result and os.path.exists(output_path):
                    processed_images.append(output_path)
                    logger.info(f"‚úÖ –ö–æ–ø–∏—è {i+1} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"‚ùå –ö–æ–ø–∏—è {i+1} –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            logger.info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {len(processed_images)}/{copies}")
            return processed_images
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            # –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            for file_path in processed_images:
                if os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                    except:
                        pass
            raise

    async def _process_single_image_copy(self, input_path: str, output_path: str, 
                                       copy_index: int, add_frames: bool, add_filters: bool, 
                                       add_rotation: bool, change_size: bool, user_id: int, target_size: tuple = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–æ–ø–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            loop = asyncio.get_event_loop()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            file_size = os.path.getsize(input_path) / (1024 * 1024)  # MB
            timeout_seconds = max(60, int(file_size * 10))  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞, +10 —Å–µ–∫ –Ω–∞ MB
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç: {timeout_seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ñ–∞–π–ª–∞ {file_size:.2f} MB")
            
            result = await asyncio.wait_for(
                loop.run_in_executor(
                    None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ThreadPoolExecutor
                    self._process_image_copy_wrapper,
                    input_path, output_path, copy_index, add_frames, add_filters, add_rotation, change_size, user_id, target_size
                ),
                timeout=timeout_seconds
            )
            
            return result
            
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {copy_index+1} (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {timeout_seconds} —Å–µ–∫—É–Ω–¥)")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ {copy_index+1}: {str(e)}")
            return False

    def _process_image_copy_wrapper(self, input_path: str, output_path: str, 
                                  copy_index: int, add_frames: bool, add_filters: bool, 
                                  add_rotation: bool, change_size: bool, user_id: int, target_size: tuple = None):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return process_image_copy_new(input_path, output_path, copy_index, add_frames, 
                                    add_filters, add_rotation, change_size, user_id, target_size)

def apply_unique_image_modifications(image: Image.Image, copy_index: int, add_frames: bool, 
                                   add_filters: bool, add_rotation: bool, change_size: bool, target_size: tuple = None):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ copy_index
    current_time = int(time.time() * 1000000)  # –ú–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª—å—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    seed_string = f"{current_time}_{copy_index}_{random.randint(1, 999999)}"
    seed_hash = int(hashlib.md5(seed_string.encode()).hexdigest()[:8], 16)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    random.seed(seed_hash)
    
    modified_image = image.copy()
    
    # 1. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if change_size and target_size:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        modified_image = modified_image.resize(target_size, Image.Resampling.LANCZOS)
        logger.info(f"–ö–æ–ø–∏—è {copy_index + 1}: —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {target_size}")
    elif change_size and not target_size:
        # –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è Stories/Reels/TikTok (fallback)
        target_sizes = [
            (1080, 1920),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ
            (1920, 1080),  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ
            (1080, 1080),  # –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ
            (1080, 1350),   # 4:5 (Instagram)
            (1080, 1080),   # 1:1
        ]
        random_size = random.choice(target_sizes)
        modified_image = modified_image.resize(random_size, Image.Resampling.LANCZOS)
        logger.info(f"–ö–æ–ø–∏—è {copy_index + 1}: —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {random_size}")
    
    # 2. –ü–æ–≤–æ—Ä–æ—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if add_rotation:
        # –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –æ—Ç -5 –¥–æ +5 –≥—Ä–∞–¥—É—Å–æ–≤
        rotation_angle = random.uniform(-2, 2)
        modified_image = modified_image.rotate(rotation_angle, expand=True, fillcolor=(255, 255, 255))
        logger.info(f"–ö–æ–ø–∏—è {copy_index + 1}: –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ {rotation_angle:.1f}¬∞")
    
    # 3. –§–∏–ª—å—Ç—Ä—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
    if add_filters:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (1-3) –¥–ª—è –±–æ–ª—å—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        num_filters = random.randint(1, 3)
        available_filters = ['brightness', 'contrast', 'saturation', 'blur', 'sharpen', 'color_enhance', 'hue_shift', 'color_tint', 'curves_adjustment', 'color_channel_adjustment', 'levels_adjustment']
        selected_filters = random.sample(available_filters, min(num_filters, len(available_filters)))
        
        logger.info(f"–ö–æ–ø–∏—è {copy_index + 1}: –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã: {selected_filters}")
        
        for filter_type in selected_filters:
            if filter_type == 'brightness':
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
                brightness_factor = random.uniform(0.8, 1.2)
                enhancer = ImageEnhance.Brightness(modified_image)
                modified_image = enhancer.enhance(brightness_factor)
                logger.info(f"  - —è—Ä–∫–æ—Å—Ç—å {brightness_factor:.2f}")
                
            elif filter_type == 'contrast':
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                contrast_factor = random.uniform(0.8, 1.3)
                enhancer = ImageEnhance.Contrast(modified_image)
                modified_image = enhancer.enhance(contrast_factor)
                logger.info(f"  - –∫–æ–Ω—Ç—Ä–∞—Å—Ç {contrast_factor:.2f}")
                
            elif filter_type == 'saturation':
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
                saturation_factor = random.uniform(0.7, 1.4)
                enhancer = ImageEnhance.Color(modified_image)
                modified_image = enhancer.enhance(saturation_factor)
                logger.info(f"  - –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å {saturation_factor:.2f}")
                
            elif filter_type == 'blur':
                # –õ–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ
                blur_radius = random.uniform(0.5, 2.0)
                modified_image = modified_image.filter(ImageFilter.GaussianBlur(radius=blur_radius))
                logger.info(f"  - —Ä–∞–∑–º—ã—Ç–∏–µ {blur_radius:.1f}px")
                
            elif filter_type == 'sharpen':
                # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
                modified_image = modified_image.filter(ImageFilter.SHARPEN)
                logger.info(f"  - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏")
                
            elif filter_type == 'color_enhance':
                # –£–ª—É—á—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
                modified_image = modified_image.filter(ImageFilter.EDGE_ENHANCE)
                logger.info(f"  - —É–ª—É—á—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤")
                
            elif filter_type == 'hue_shift':
                # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∞
                modified_image = apply_hue_shift(modified_image)
                logger.info(f"  - —Å–¥–≤–∏–≥ –æ—Ç—Ç–µ–Ω–∫–∞")
                
            elif filter_type == 'color_tint':
                # –¶–≤–µ—Ç–Ω–æ–π –æ—Ç—Ç–µ–Ω–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
                modified_image = apply_color_tint(modified_image)
                logger.info(f"  - —Ü–≤–µ—Ç–Ω–æ–π –æ—Ç—Ç–µ–Ω–æ–∫")
                
            elif filter_type == 'curves_adjustment':
                # –ö—Ä–∏–≤—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                modified_image = apply_curves_adjustment(modified_image)
                logger.info(f"  - –∫—Ä–∏–≤—ã–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
                
            elif filter_type == 'color_channel_adjustment':
                # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                modified_image = apply_color_channel_adjustment(modified_image)
                logger.info(f"  - —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã")
                
            elif filter_type == 'levels_adjustment':
                # –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
                modified_image = apply_levels_adjustment(modified_image)
                logger.info(f"  - —É—Ä–æ–≤–Ω–∏")
    
    # 4. –†–∞–º–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
    if add_frames:
        frame_colors = [
            (255, 0, 0),      # –ö—Ä–∞—Å–Ω—ã–π
            (0, 255, 0),      # –ó–µ–ª–µ–Ω—ã–π  
            (0, 0, 255),      # –°–∏–Ω–∏–π
            (255, 255, 0),    # –ñ–µ–ª—Ç—ã–π
            (255, 0, 255),    # –ü—É—Ä–ø—É—Ä–Ω—ã–π
            (0, 255, 255),    # –ì–æ–ª—É–±–æ–π
            (255, 128, 0),    # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            (128, 0, 255),    # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            (255, 192, 203),  # –†–æ–∑–æ–≤—ã–π
            (0, 128, 0),      # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
            (128, 128, 0),    # –û–ª–∏–≤–∫–æ–≤—ã–π
            (0, 128, 128),    # –¢–µ–º–Ω–æ-–≥–æ–ª—É–±–æ–π
            (128, 0, 0),      # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
            (0, 0, 128),      # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
            (255, 165, 0),    # –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            (75, 0, 130),     # –ò–Ω–¥–∏–≥–æ
            (238, 130, 238),  # –§–∏–æ–ª–µ—Ç–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π
            (255, 20, 147),   # –¢–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
            (0, 191, 255),    # –Ø—Ä–∫–æ-–≥–æ–ª—É–±–æ–π
            (50, 205, 50),    # –õ–∞–π–º-–∑–µ–ª–µ–Ω—ã–π
            (255, 69, 0),     # –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
            (138, 43, 226),   # –°–∏–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            (255, 215, 0),    # –ó–æ–ª–æ—Ç–æ–π
            (220, 20, 60),    # –ú–∞–ª–∏–Ω–æ–≤—ã–π
            (32, 178, 170),   # –°–≤–µ—Ç–ª–æ-–º–æ—Ä—Å–∫–æ–π
            (255, 105, 180),  # –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
            (124, 252, 0),    # –õ–∞–π–º
            (255, 99, 71),    # –¢–æ–º–∞—Ç–Ω—ã–π
            (72, 61, 139),    # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Å–ª–∞–Ω–µ—Ü
            (255, 140, 0)     # –¢–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏
        frame_color = random.choice(frame_colors)
        
        # –°–ª—É—á–∞–π–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ –æ—Ç 5 –¥–æ 50 –ø–∏–∫—Å–µ–ª–µ–π
        frame_thickness = random.randint(5, 50)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω —Ä–∞–º–∫–∏
        frame_style = random.choice(['uniform', 'top_bottom_thick', 'sides_thick'])
        
        modified_image = add_background_to_image(modified_image, frame_color, frame_thickness, frame_style)
        logger.info(f"–ö–æ–ø–∏—è {copy_index + 1}: —Ñ–æ–Ω {frame_color}, —Ç–æ–ª—â–∏–Ω–∞ {frame_thickness}px, —Å—Ç–∏–ª—å {frame_style}")
    
    # 5. –ù–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    brightness_factor = 0.95 + (copy_index * 0.02)  # –û—á–µ–Ω—å –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
    enhancer = ImageEnhance.Brightness(modified_image)
    modified_image = enhancer.enhance(brightness_factor)
    logger.info(f"–ö–æ–ø–∏—è {copy_index + 1}: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å {brightness_factor:.2f}")
    
    return modified_image

def add_background_to_image(image: Image.Image, color: tuple, thickness: int, frame_style: str = 'uniform'):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    import numpy as np
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    width, height = image.size
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ–ª—â–∏–Ω—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
    if frame_style == 'top_bottom_thick':
        # –í–µ—Ä—Ö –∏ –Ω–∏–∑ —Ç–æ–ª—â–µ –±–æ–∫–æ–≤
        top_bottom_thickness = thickness
        left_right_thickness = max(3, thickness // 3)
    elif frame_style == 'sides_thick':
        # –ë–æ–∫–∞ —Ç–æ–ª—â–µ –≤–µ—Ä—Ö–∞/–Ω–∏–∑–∞
        left_right_thickness = thickness
        top_bottom_thickness = max(3, thickness // 3)
    else:  # uniform
        # –í—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        top_bottom_thickness = thickness
        left_right_thickness = thickness
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–æ–Ω–æ–º
    new_width = width + (left_right_thickness * 2)
    new_height = height + (top_bottom_thickness * 2)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏–ª–∏ –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    background_style = random.choice(['solid', 'gradient_vertical', 'gradient_horizontal', 'gradient_diagonal'])
    
    if background_style == 'solid':
        # –û–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π —Ñ–æ–Ω
        background_image = Image.new('RGB', (new_width, new_height), color)
    else:
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        background_image = create_gradient_background(new_width, new_height, color, background_style)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä
    paste_x = left_right_thickness
    paste_y = top_bottom_thickness
    background_image.paste(image, (paste_x, paste_y))
    
    return background_image

def create_gradient_background(width: int, height: int, base_color: tuple, style: str):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω"""
    import numpy as np
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç
    r, g, b = base_color
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    if style == 'gradient_vertical':
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        gradient = np.zeros((height, width, 3), dtype=np.uint8)
        for y in range(height):
            factor = y / height
            gradient[y, :] = [
                int(r * (0.7 + 0.3 * factor)),
                int(g * (0.7 + 0.3 * factor)),
                int(b * (0.7 + 0.3 * factor))
            ]
    elif style == 'gradient_horizontal':
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        gradient = np.zeros((height, width, 3), dtype=np.uint8)
        for x in range(width):
            factor = x / width
            gradient[:, x] = [
                int(r * (0.7 + 0.3 * factor)),
                int(g * (0.7 + 0.3 * factor)),
                int(b * (0.7 + 0.3 * factor))
            ]
    else:  # gradient_diagonal
        # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        gradient = np.zeros((height, width, 3), dtype=np.uint8)
        for y in range(height):
            for x in range(width):
                factor = (x + y) / (width + height)
                gradient[y, x] = [
                    int(r * (0.6 + 0.4 * factor)),
                    int(g * (0.6 + 0.4 * factor)),
                    int(b * (0.6 + 0.4 * factor))
                ]
    
    return Image.fromarray(gradient)

def apply_hue_shift(image: Image.Image):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ü–≤–µ—Ç–Ω–æ–π –ø–ª–µ–Ω–∫–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    import numpy as np
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–ª–µ–Ω–∫–∏ (–±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∏ –∑–∞–º–µ—Ç–Ω—ã–µ)
    color_overlays = [
        (255, 80, 80, 0.4),      # –ö—Ä–∞—Å–Ω–∞—è –ø–ª–µ–Ω–∫–∞
        (80, 255, 80, 0.4),      # –ó–µ–ª–µ–Ω–∞—è –ø–ª–µ–Ω–∫–∞
        (80, 80, 255, 0.4),      # –°–∏–Ω—è—è –ø–ª–µ–Ω–∫–∞
        (255, 255, 80, 0.4),     # –ñ–µ–ª—Ç–∞—è –ø–ª–µ–Ω–∫–∞
        (255, 80, 255, 0.4),     # –ü—É—Ä–ø—É—Ä–Ω–∞—è –ø–ª–µ–Ω–∫–∞
        (80, 255, 255, 0.4),     # –ì–æ–ª—É–±–∞—è –ø–ª–µ–Ω–∫–∞
        (255, 120, 80, 0.4),     # –û—Ä–∞–Ω–∂–µ–≤–∞—è –ø–ª–µ–Ω–∫–∞
        (120, 80, 255, 0.4),     # –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –ø–ª–µ–Ω–∫–∞
        (80, 255, 120, 0.4),     # –õ–∞–π–º–æ–≤–∞—è –ø–ª–µ–Ω–∫–∞
        (255, 180, 80, 0.4),     # –ü–µ—Ä—Å–∏–∫–æ–≤–∞—è –ø–ª–µ–Ω–∫–∞
        (180, 80, 255, 0.4),     # –ò–Ω–¥–∏–≥–æ –ø–ª–µ–Ω–∫–∞
        (255, 80, 180, 0.4),     # –†–æ–∑–æ–≤–∞—è –ø–ª–µ–Ω–∫–∞
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏
    overlay_color = random.choice(color_overlays)
    r, g, b, alpha = overlay_color
    
    # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –ø–ª–µ–Ω–∫—É
    overlay = Image.new('RGB', image.size, (r, g, b))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–µ–Ω–∫—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    result = Image.blend(image, overlay, alpha)
    
    return result

def apply_color_tint(image: Image.Image):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –æ—Ç—Ç–µ–Ω–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    import numpy as np
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ç—Ç–µ–Ω–∫–∞
    tint_colors = [
        (255, 150, 150),    # –¢–µ–ø–ª—ã–π —Ä–æ–∑–æ–≤—ã–π
        (150, 255, 150),    # –¢–µ–ø–ª—ã–π –∑–µ–ª–µ–Ω—ã–π
        (150, 150, 255),    # –¢–µ–ø–ª—ã–π —Å–∏–Ω–∏–π
        (255, 255, 150),    # –¢–µ–ø–ª—ã–π –∂–µ–ª—Ç—ã–π
        (255, 150, 255),    # –¢–µ–ø–ª—ã–π –ø—É—Ä–ø—É—Ä–Ω—ã–π
        (150, 255, 255),    # –¢–µ–ø–ª—ã–π –≥–æ–ª—É–±–æ–π
        (255, 200, 150),    # –¢–µ–ø–ª—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        (200, 150, 255),    # –¢–µ–ø–ª—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        (150, 255, 200),    # –¢–µ–ø–ª—ã–π –ª–∞–π–º
        (255, 220, 150),    # –¢–µ–ø–ª—ã–π –ø–µ—Ä—Å–∏–∫
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
    tint_color = random.choice(tint_colors)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—É—é –ø–ª–µ–Ω–∫—É
    width, height = image.size
    overlay = Image.new('RGB', (width, height))
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –∫ —Ü–≤–µ—Ç–Ω–æ–º—É
    gradient_style = random.choice(['vertical', 'horizontal', 'diagonal', 'radial'])
    
    if gradient_style == 'vertical':
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for y in range(height):
            alpha = y / height * 0.4  # –ú–∞–∫—Å–∏–º—É–º 40% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            color = tuple(int(c * alpha + 255 * (1 - alpha)) for c in tint_color)
            for x in range(width):
                overlay.putpixel((x, y), color)
                
    elif gradient_style == 'horizontal':
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for x in range(width):
            alpha = x / width * 0.4
            color = tuple(int(c * alpha + 255 * (1 - alpha)) for c in tint_color)
            for y in range(height):
                overlay.putpixel((x, y), color)
                
    elif gradient_style == 'diagonal':
        # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for y in range(height):
            for x in range(width):
                alpha = ((x + y) / (width + height)) * 0.4
                color = tuple(int(c * alpha + 255 * (1 - alpha)) for c in tint_color)
                overlay.putpixel((x, y), color)
                
    else:  # radial
        # –†–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        center_x, center_y = width // 2, height // 2
        max_distance = ((width ** 2 + height ** 2) ** 0.5) / 2
        for y in range(height):
            for x in range(width):
                distance = ((x - center_x) ** 2 + (y - center_y) ** 2) ** 0.5
                alpha = (1 - distance / max_distance) * 0.4
                alpha = max(0, alpha)
                color = tuple(int(c * alpha + 255 * (1 - alpha)) for c in tint_color)
                overlay.putpixel((x, y), color)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–µ–Ω–∫—É
    result = Image.blend(image, overlay, 0.3)
    
    return result

def apply_curves_adjustment(image: Image.Image):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫—Ä–∏–≤—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    import numpy as np
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–≤—ã–º–∏
    img_array = np.array(image)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫—Ä–∏–≤—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ RGB
    for channel in range(3):  # R, G, B –∫–∞–Ω–∞–ª—ã
        # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫—Ä–∏–≤–æ–π
        curve_points = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫–∏
        curve_points.append((0, random.randint(-20, 20)))
        curve_points.append((255, 255 + random.randint(-20, 20)))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
        num_points = random.randint(1, 3)
        for _ in range(num_points):
            x = random.randint(50, 200)
            y = x + random.randint(-30, 30)
            y = max(0, min(255, y))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            curve_points.append((x, y))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ x
        curve_points.sort(key=lambda p: p[0])
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–≤—É—é
        x_points = [p[0] for p in curve_points]
        y_points = [p[1] for p in curve_points]
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫—Ä–∏–≤—É—é
        curve = np.interp(range(256), x_points, y_points)
        curve = np.clip(curve, 0, 255)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∏–≤—É—é –∫ –∫–∞–Ω–∞–ª—É
        img_array[:, :, channel] = curve[img_array[:, :, channel]]
    
    return Image.fromarray(img_array.astype(np.uint8))

def apply_color_channel_adjustment(image: Image.Image):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º"""
    import numpy as np
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤
    img_array = np.array(image)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)
    color_ranges = {
        'red': (0, 30),
        'orange': (30, 60), 
        'yellow': (60, 90),
        'green': (90, 150),
        'blue': (150, 240),
        'purple': (240, 270),
        'pink': (270, 360)
    }
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    num_adjustments = random.randint(2, 4)
    selected_ranges = random.sample(list(color_ranges.keys()), num_adjustments)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—Ç–µ–Ω–∫–∞–º–∏
    hsv_array = np.array(image.convert('HSV'))
    
    for color_range in selected_ranges:
        hue_min, hue_max = color_ranges[color_range]
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        hue_shift = random.randint(-20, 20)
        saturation_factor = random.uniform(0.7, 1.4)
        brightness_factor = random.uniform(0.8, 1.2)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        mask = (hsv_array[:, :, 0] >= hue_min) & (hsv_array[:, :, 0] <= hue_max)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        hsv_array[mask, 0] = (hsv_array[mask, 0] + hue_shift) % 360
        hsv_array[mask, 1] = np.clip(hsv_array[mask, 1] * saturation_factor, 0, 255)
        hsv_array[mask, 2] = np.clip(hsv_array[mask, 2] * brightness_factor, 0, 255)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB
    return Image.fromarray(hsv_array.astype(np.uint8), 'HSV').convert('RGB')

def apply_levels_adjustment(image: Image.Image):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π (–∫–∞–∫ –≤ Photoshop)"""
    import numpy as np
    
    img_array = np.array(image)
    
    # –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel in range(3):
        # –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ —á–µ—Ä–Ω–æ–≥–æ, —Å–µ—Ä–æ–≥–æ –∏ –±–µ–ª–æ–≥–æ
        black_point = random.randint(0, 50)
        white_point = random.randint(200, 255)
        gray_point = random.uniform(0.8, 1.2)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
        channel_data = img_array[:, :, channel].astype(np.float32)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1
        channel_data = channel_data / 255.0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–Ω—É—é –∏ –±–µ–ª—É—é —Ç–æ—á–∫–∏
        channel_data = np.clip((channel_data - black_point/255.0) / (white_point/255.0 - black_point/255.0), 0, 1)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—é
        channel_data = np.power(channel_data, gray_point)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-255
        img_array[:, :, channel] = np.clip(channel_data * 255, 0, 255)
    
    return Image.fromarray(img_array.astype(np.uint8))

def process_image_copy_new(input_path: str, output_path: str, copy_index: int, add_frames: bool, 
                          add_filters: bool, add_rotation: bool, change_size: bool, user_id: int = None, target_size: tuple = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ø–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {copy_index + 1}: {input_path} -> {output_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(input_path):
            logger.error(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(input_path) as image:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            modified_image = apply_unique_image_modifications(
                image, copy_index, add_frames, add_filters, add_rotation, change_size, target_size
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(TEMP_DIR, exist_ok=True)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            cleanup_old_temp_images(TEMP_DIR)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            modified_image.save(output_path, 'JPEG', quality=95, optimize=True)
            
            logger.info(f"–ö–æ–ø–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {copy_index + 1} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
            return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {copy_index + 1}: {str(e)}")
        return False
