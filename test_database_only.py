#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import psycopg2
from dotenv import load_dotenv

def test_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    print("üóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö POSTGRESQL")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    db_config = {
        'host': os.environ.get('DB_HOST'),
        'port': os.environ.get('DB_PORT'),
        'database': os.environ.get('DB_NAME'),
        'user': os.environ.get('DB_USER'),
        'password': os.environ.get('DB_PASSWORD')
    }
    
    print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    for key, value in db_config.items():
        if key == 'password':
            display_value = '*' * len(value) if value else '–ù–ï –ó–ê–î–ê–ù'
        else:
            display_value = value or '–ù–ï –ó–ê–î–ê–ù'
        print(f"   {key}: {display_value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    missing_params = [key for key, value in db_config.items() if not value]
    if missing_params:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(missing_params)}")
        return False
    
    print(f"\nüîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {db_config['host']}:{db_config['port']}...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        conn = psycopg2.connect(**db_config)
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
        with conn.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            print(f"üìä –í–µ—Ä—Å–∏—è PostgreSQL: {version.split(',')[0]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT current_database();")
            current_db = cursor.fetchone()[0]
            print(f"üóÑÔ∏è –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {current_db}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT current_user;")
            current_user = cursor.fetchone()[0]
            print(f"üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            
            if tables:
                print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                for table in tables:
                    print(f"   - {table[0]}")
            else:
                print("\nüìã –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è)")
        
        conn.close()
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("   2. –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("   3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("   4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return False
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def check_postgresql_service():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã PostgreSQL"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã PostgreSQL...")
    print("=" * 40)
    
    try:
        # –î–ª—è Windows
        import subprocess
        result = subprocess.run(
            ['sc', 'query', 'postgresql-x64-14'], 
            capture_output=True, 
            text=True
        )
        
        if 'RUNNING' in result.stdout:
            print("‚úÖ –°–ª—É–∂–±–∞ PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞")
            return True
        elif 'STOPPED' in result.stdout:
            print("‚ùå –°–ª—É–∂–±–∞ PostgreSQL –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sc start postgresql-x64-14")
            return False
        else:
            print("‚ùì –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª—É–∂–±—É: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á –∏–ª–∏ services.msc")
        return False

if __name__ == "__main__":
    service_ok = check_postgresql_service()
    db_ok = test_database_connection()
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if db_ok:
        print("‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• –†–ê–ë–û–¢–ê–ï–¢!")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
        if not service_ok:
            print("üîß –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–ª—É–∂–±—É PostgreSQL!")
        else:
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ!")