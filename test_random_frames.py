#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–º–æ–∫
"""

import sys
import os
import time
import random
import hashlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_random_frame_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–º–æ–∫"""
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ (–∫–æ–ø–∏—è –∏–∑ video_processor.py)
    frame_colors = [
        (255, 0, 0),      # –ö—Ä–∞—Å–Ω—ã–π
        (0, 255, 0),      # –ó–µ–ª–µ–Ω—ã–π  
        (0, 0, 255),      # –°–∏–Ω–∏–π
        (255, 255, 0),    # –ñ–µ–ª—Ç—ã–π
        (255, 0, 255),    # –ü—É—Ä–ø—É—Ä–Ω—ã–π
        (0, 255, 255),    # –ì–æ–ª—É–±–æ–π
        (255, 128, 0),    # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        (128, 0, 255),    # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        (255, 192, 203),  # –†–æ–∑–æ–≤—ã–π
        (0, 128, 0),      # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
        (128, 128, 0),    # –û–ª–∏–≤–∫–æ–≤—ã–π
        (0, 128, 128),    # –¢–µ–º–Ω–æ-–≥–æ–ª—É–±–æ–π
        (128, 0, 0),      # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        (0, 0, 128),      # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        (255, 165, 0),    # –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
        (75, 0, 130),     # –ò–Ω–¥–∏–≥–æ
        (238, 130, 238),  # –§–∏–æ–ª–µ—Ç–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π
        (255, 20, 147),   # –¢–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
        (0, 191, 255),    # –Ø—Ä–∫–æ-–≥–æ–ª—É–±–æ–π
        (50, 205, 50),    # –õ–∞–π–º-–∑–µ–ª–µ–Ω—ã–π
        (255, 69, 0),     # –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        (138, 43, 226),   # –°–∏–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        (255, 215, 0),    # –ó–æ–ª–æ—Ç–æ–π
        (220, 20, 60),    # –ú–∞–ª–∏–Ω–æ–≤—ã–π
        (32, 178, 170),   # –°–≤–µ—Ç–ª–æ-–º–æ—Ä—Å–∫–æ–π
        (255, 105, 180),  # –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
        (124, 252, 0),    # –õ–∞–π–º
        (255, 99, 71),    # –¢–æ–º–∞—Ç–Ω—ã–π
        (72, 61, 139),    # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Å–ª–∞–Ω–µ—Ü
        (255, 140, 0)     # –¢–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–∞–º–æ–∫...")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ü–≤–µ—Ç–æ–≤: {len(frame_colors)}")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–ø–∏–π
    results = []
    
    for test_run in range(3):  # 3 –ø—Ä–æ–≥–æ–Ω–∞ —Ç–µ—Å—Ç–∞
        print(f"\nüîÑ –ü—Ä–æ–≥–æ–Ω {test_run + 1}:")
        run_results = []
        
        for copy_index in range(3):  # 3 –∫–æ–ø–∏–∏
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ video_processor.py)
            current_time = int(time.time() * 1000000)  # –ú–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            seed_string = f"{current_time}_{copy_index}_{random.randint(1, 999999)}"
            seed_hash = int(hashlib.md5(seed_string.encode()).hexdigest()[:8], 16)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            random.seed(seed_hash)
            
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã
            color = random.choice(frame_colors)
            frame_thickness = random.randint(3, 15)
            
            result = {
                'copy': copy_index + 1,
                'color': color,
                'thickness': frame_thickness,
                'seed': seed_hash
            }
            
            run_results.append(result)
            
            print(f"  üìπ –ö–æ–ø–∏—è {copy_index + 1}: —Ü–≤–µ—Ç {color}, —Ç–æ–ª—â–∏–Ω–∞ {frame_thickness}px (seed: {seed_hash})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            time.sleep(0.001)
        
        results.append(run_results)
    
    # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    print("\n" + "=" * 60)
    print("üìà –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò:")
    
    all_combinations = []
    for run in results:
        for result in run:
            combination = (result['color'], result['thickness'])
            all_combinations.append(combination)
    
    unique_combinations = set(all_combinations)
    
    print(f"üéØ –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(all_combinations)}")
    print(f"‚ú® –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(unique_combinations)}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {len(unique_combinations)/len(all_combinations)*100:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–≥–æ–Ω–µ
    for i, run in enumerate(results):
        run_combinations = [(r['color'], r['thickness']) for r in run]
        unique_in_run = set(run_combinations)
        print(f"üîÑ –ü—Ä–æ–≥–æ–Ω {i+1}: {len(unique_in_run)}/{len(run_combinations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    if len(unique_combinations) >= len(all_combinations) * 0.8:  # 80% —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        print("üéâ –£–°–ü–ï–•: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏!")
        return True
    else:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏!")
        return False

if __name__ == "__main__":
    success = test_random_frame_generation()
    sys.exit(0 if success else 1)