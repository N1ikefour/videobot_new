"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import os
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from image_processor import ImageProcessor
from database import DatabaseManager

logger = logging.getLogger(__name__)

class ImageHandlers:
    def __init__(self, image_processor: ImageProcessor, db_manager: DatabaseManager):
        self.image_processor = image_processor
        self.db_manager = db_manager

    async def choose_image_copies_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
        keyboard = [
            [InlineKeyboardButton("1 –∫–æ–ø–∏—è", callback_data="image_copies_1")],
            [InlineKeyboardButton("3 –∫–æ–ø–∏–∏", callback_data="image_copies_3")],
            [InlineKeyboardButton("6 –∫–æ–ø–∏–π", callback_data="image_copies_6")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data="back_to_image_parameters")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n"
            "–ß–µ–º –±–æ–ª—å—à–µ –∫–æ–ø–∏–π, —Ç–µ–º –±–æ–ª—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return "CHOOSING_IMAGE_COPIES"

    async def toggle_image_frames(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–º–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id in context.bot_data.get('user_data', {}):
            current_value = context.bot_data['user_data'][user_id].get('add_frames', False)
            context.bot_data['user_data'][user_id]['add_frames'] = not current_value
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from bot import VideoBot
        bot_instance = VideoBot()
        return await bot_instance.show_image_parameters_menu(update, context)

    async def toggle_image_filters(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id in context.bot_data.get('user_data', {}):
            current_value = context.bot_data['user_data'][user_id].get('add_filters', False)
            context.bot_data['user_data'][user_id]['add_filters'] = not current_value
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from bot import VideoBot
        bot_instance = VideoBot()
        return await bot_instance.show_image_parameters_menu(update, context)

    async def toggle_image_rotation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id in context.bot_data.get('user_data', {}):
            current_value = context.bot_data['user_data'][user_id].get('add_rotation', False)
            context.bot_data['user_data'][user_id]['add_rotation'] = not current_value
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from bot import VideoBot
        bot_instance = VideoBot()
        return await bot_instance.show_image_parameters_menu(update, context)

    async def toggle_image_size(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        if user_id in context.bot_data.get('user_data', {}):
            current_value = context.bot_data['user_data'][user_id].get('change_size', False)
            context.bot_data['user_data'][user_id]['change_size'] = not current_value
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from bot import VideoBot
        bot_instance = VideoBot()
        return await bot_instance.show_image_parameters_menu(update, context)

    async def choose_image_copies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        callback_data = query.data
        
        if callback_data.startswith("image_copies_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ callback_data
            copies = int(callback_data.split("_")[2])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
            if user_id in context.bot_data.get('user_data', {}):
                context.bot_data['user_data'][user_id]['copies'] = copies
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            from bot import VideoBot
            bot_instance = VideoBot()
            return await bot_instance.show_image_parameters_menu(update, context)
        
        elif callback_data == "back_to_image_parameters":
            from bot import VideoBot
            bot_instance = VideoBot()
            return await bot_instance.show_image_parameters_menu(update, context)
        
        return "CHOOSING_IMAGE_COPIES"

    async def start_image_processing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        if user_id not in context.bot_data.get('user_data', {}):
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
            return "END"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        user_settings = context.bot_data['user_data'][user_id]
        copies = user_settings['copies']
        add_frames = user_settings['add_frames']
        add_filters = user_settings['add_filters']
        add_rotation = user_settings['add_rotation']
        change_size = user_settings['change_size']
        
        frames_text = "—Å —Ä–∞–º–∫–∞–º–∏" if add_frames else "–±–µ–∑ —Ä–∞–º–æ–∫"
        filters_text = "—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏" if add_filters else "–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"
        rotation_text = "—Å –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏" if add_rotation else "–±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤"
        size_text = "—Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞" if change_size else "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await query.edit_message_text(
            f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n"
            f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"‚Ä¢ –ö–æ–ø–∏–π: {copies}\n"
            f"‚Ä¢ –†–∞–º–∫–∏: {frames_text}\n"
            f"‚Ä¢ –§–∏–ª—å—Ç—Ä—ã: {filters_text}\n"
            f"‚Ä¢ –ü–æ–≤–æ—Ä–æ—Ç—ã: {rotation_text}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {size_text}\n\n"
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ..."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        task = asyncio.create_task(
            self._process_image_async(
                user_id, 
                user_settings, 
                processing_message, 
                context,
                update.effective_chat.id
            )
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        if 'active_processing_tasks' not in context.bot_data:
            context.bot_data['active_processing_tasks'] = {}
        context.bot_data['active_processing_tasks'][user_id] = task
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return "WAITING_FOR_IMAGE"

    async def _process_image_async(self, user_id: int, user_settings: dict, 
                                 processing_message, context, chat_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
        input_path = None
        processed_images = []
        
        try:
            copies = user_settings['copies']
            add_frames = user_settings['add_frames']
            add_filters = user_settings['add_filters']
            add_rotation = user_settings['add_rotation']
            change_size = user_settings['change_size']
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_file_id = user_settings.get('image_file_id')
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                await asyncio.wait_for(
                    processing_message.edit_text(
                        f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n"
                        f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {copies} –∫–æ–ø–∏–π\n\n"
                        f"üì• –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."
                    ),
                    timeout=5.0
                )
            except asyncio.TimeoutError:
                logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            image_file = await context.bot.get_file(image_file_id)
            input_path = f"temp/input_image_{user_id}.jpg"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs("temp", exist_ok=True)
            
            await image_file.download_to_drive(input_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–∫–∞—á–∞–Ω
            if not os.path.exists(input_path):
                logger.error(f"–§–∞–π–ª {input_path} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                try:
                    await asyncio.wait_for(
                        processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."),
                        timeout=5.0
                    )
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
                return
            
            file_size = os.path.getsize(input_path)
            logger.info(f"–§–∞–π–ª {input_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            try:
                await asyncio.wait_for(
                    processing_message.edit_text(
                        f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n"
                        f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {copies} –∫–æ–ø–∏–π\n\n"
                        f"üé® –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏..."
                    ),
                    timeout=5.0
                )
            except asyncio.TimeoutError:
                logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–π")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_images = await self.image_processor.process_image(
                input_path, user_id, copies, add_frames, add_filters, add_rotation, change_size
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await asyncio.wait_for(
                    processing_message.edit_text(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n"
                        f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_images)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                    ),
                    timeout=5.0
                )
            except asyncio.TimeoutError:
                logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, image_path in enumerate(processed_images, 1):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    await asyncio.wait_for(
                        processing_message.edit_text(
                            f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}/{len(processed_images)}...\n"
                            f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_images)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                        ),
                        timeout=5.0
                    )
                except asyncio.TimeoutError:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {i}/{len(processed_images)}")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                image_data = await asyncio.to_thread(self._read_image_file, image_path)
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=image_data,
                    caption=f"üñºÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è #{i}/{copies}"
                )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(image_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if input_path and os.path.exists(input_path):
                try:
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    await asyncio.sleep(1)
                    os.remove(input_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path}")
                except PermissionError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª {input_path} - —Ñ–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {input_path}: {e}")
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            try:
                await asyncio.wait_for(
                    processing_message.edit_text(
                        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                        f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(processed_images)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                    ),
                    timeout=5.0
                )
            except asyncio.TimeoutError:
                logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                             f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(processed_images)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                    )
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {send_error}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                             f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(processed_images)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π"
                    )
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {send_error}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try:
                input_image_info = {
                    'file_id': image_file_id,
                    'file_size': file_size,
                }
                
                processing_params = {
                    'copies': copies,
                    'add_frames': add_frames,
                    'add_filters': add_filters,
                    'add_rotation': add_rotation,
                    'change_size': change_size
                }
                
                self.db_manager.record_image_processing(
                    user_id=user_id,
                    input_image_info=input_image_info,
                    output_count=len(processed_images),
                    processing_params=processing_params
                )
                logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="üñºÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
                         "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                         "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 20 –ú–ë\n"
                         "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG, BMP, TIFF, WEBP\n"
                         "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –ª—é–±–æ–µ\n\n"
                         "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üëá"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ context
            context.user_data['conversation_state'] = "WAITING_FOR_IMAGE"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                await asyncio.wait_for(
                    processing_message.edit_text(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\n\n"
                        "üñºÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
                        "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                        "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 20 –ú–ë\n"
                        "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG, BMP, TIFF, WEBP\n"
                        "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –ª—é–±–æ–µ\n\n"
                        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üëá"
                    ),
                    timeout=5.0
                )
            except Exception as edit_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\n\n"
                             "üñºÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
                             "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                             "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 20 –ú–ë\n"
                             "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG, BMP, TIFF, WEBP\n"
                             "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –ª—é–±–æ–µ\n\n"
                             "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é üëá"
                    )
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ context
            context.user_data['conversation_state'] = "WAITING_FOR_IMAGE"
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º
            if input_path and os.path.exists(input_path):
                try:
                    await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    os.remove(input_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path}")
                except PermissionError:
                    logger.warning(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª {input_path} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {input_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
            for image_path in processed_images:
                if os.path.exists(image_path):
                    try:
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                        os.remove(image_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {image_path}")
                    except PermissionError:
                        logger.warning(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {image_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
            if user_id in context.bot_data.get('user_data', {}):
                del context.bot_data['user_data'][user_id]
            if user_id in context.bot_data.get('active_processing_tasks', {}):
                del context.bot_data['active_processing_tasks'][user_id]

    def _read_image_file(self, image_path: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        with open(image_path, 'rb') as image_file:
            return image_file.read()
