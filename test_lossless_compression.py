#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ lossless —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ
"""

import os
import sys
import tempfile
import shutil
import asyncio
from moviepy.editor import VideoFileClip, ColorClip
from video_processor import generate_random_compression_settings, VideoProcessor

def create_test_video(output_path, duration=3):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
    clip = ColorClip(size=(640, 480), color=(255, 0, 0), duration=duration)
    clip = clip.set_fps(24)
    clip.write_videofile(output_path, verbose=False, logger=None)
    clip.close()

def test_lossless_compression():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å lossless —Ä–µ–∂–∏–º–æ–º"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ lossless —Å–∂–∞—Ç–∏—è...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–ø–∏–π
    lossless_count = 0
    lossy_count = 0
    
    for i in range(20):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º 20 –∫–æ–ø–∏–π
        settings = generate_random_compression_settings(i)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        required_keys = ['width', 'height', 'fps', 'audio_bitrate', 'ffmpeg_params']
        for key in required_keys:
            assert key in settings, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CRF –≤ ffmpeg_params
        ffmpeg_params = settings['ffmpeg_params']
        crf_found = False
        for j in range(len(ffmpeg_params)):
            if ffmpeg_params[j] == '-crf':
                crf_value = int(ffmpeg_params[j + 1])
                if crf_value == 0:
                    lossless_count += 1
                    print(f"–ö–æ–ø–∏—è {i}: LOSSLESS (CRF=0)")
                else:
                    lossy_count += 1
                    print(f"–ö–æ–ø–∏—è {i}: LOSSY (CRF={crf_value})")
                crf_found = True
                break
        
        assert crf_found, f"CRF –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ffmpeg_params –¥–ª—è –∫–æ–ø–∏–∏ {i}"
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
    print(f"Lossless –∫–æ–ø–∏–π: {lossless_count}")
    print(f"Lossy –∫–æ–ø–∏–π: {lossy_count}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç lossless: {lossless_count / 20 * 100:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∏ lossless –∏ lossy –∫–æ–ø–∏–∏
    assert lossless_count > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π lossless –∫–æ–ø–∏–∏"
    assert lossy_count > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π lossy –∫–æ–ø–∏–∏"
    
    print("‚úì –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

async def test_video_processing_with_lossless():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ —Å lossless –∫–æ–ø–∏—è–º–∏"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å lossless –∫–æ–ø–∏—è–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_dir = tempfile.mkdtemp()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
        input_video = os.path.join(temp_dir, "test_input.mp4")
        create_test_video(input_video)
        
        print(f"–°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: {input_video}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        processor = VideoProcessor()
        result = await processor.process_video(
            input_path=input_video,
            user_id=12345,
            copies=5,
            add_frames=True,
            compress=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(result, list) and len(result) > 0:
            print(f"–°–æ–∑–¥–∞–Ω–æ {len(result)} –∫–æ–ø–∏–π –≤–∏–¥–µ–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
            file_sizes = []
            for video_path in result:
                if os.path.exists(video_path):
                    size = os.path.getsize(video_path)
                    file_sizes.append(size)
                    print(f"–§–∞–π–ª: {os.path.basename(video_path)}, —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            unique_sizes = len(set(file_sizes))
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤: {unique_sizes}")
            
            if unique_sizes > 1:
                print("‚úì –§–∞–π–ª—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã - —Å–∂–∞—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ö† –í—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä")
            
            # –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for video_path in result:
                if os.path.exists(video_path):
                    os.remove(video_path)
            
            print("‚úì –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        shutil.rmtree(temp_dir, ignore_errors=True)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    try:
        test_lossless_compression()
        success = await test_video_processing_with_lossless()
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())